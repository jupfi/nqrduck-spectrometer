import logging
from pathlib import Path
from PyQt6.QtWidgets import QWidget, QLabel, QLineEdit, QHBoxLayout, QSizePolicy, QSpacerItem, QVBoxLayout, QCheckBox, QComboBox
from PyQt6.QtGui import QIcon
from PyQt6.QtCore import Qt, pyqtSlot
from nqrduck.module.module_view import ModuleView
from nqrduck.assets.icons import Logos
from .settings import FloatSetting, IntSetting, BooleanSetting, SelectionSetting, StringSetting

logger = logging.getLogger(__name__)


class BaseSpectrometerView(ModuleView):
    
    def __init__(self, module):
        super().__init__(module)

    def load_settings_ui(self):
        """This method automatically generates a view for the settings of the module.
        If there is a widget file that has been generated by Qt Designer, it will be used. Otherwise, a default view will be generated."""
        
        from .base_spectrometer_widget import Ui_Form
        widget = QWidget()
        widget.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self._ui_form = Ui_Form()
        self.widget = widget
        self._ui_form.setupUi(self)

        grid = self._ui_form.gridLayout
        self._ui_form.verticalLayout.removeItem(self._ui_form.gridLayout)
        # Add name of the spectrometer to the view
        label = QLabel("%s Settings:" % self.module.model.toolbar_name)
        label.setStyleSheet("font-weight: bold;")
        self._ui_form.verticalLayout.setSpacing(5)
        self._ui_form.verticalLayout.addWidget(label)
        self._ui_form.verticalLayout.addLayout(grid)

        for category_count, category in enumerate(self.module.model.settings.keys()):
            logger.debug("Adding settings for category: %s", category)
            category_layout = QVBoxLayout()
            category_label = QLabel("%s:" % category)
            category_label.setStyleSheet("font-weight: bold;")
            row = category_count // 2
            column = category_count % 2

            category_layout.addWidget(category_label)
            for setting in self.module.model.settings[category]:
                logger.debug("Adding setting to settings view: %s", setting.name)

                spacer = QSpacerItem(20, 20)
                # Create a label for the setting
                setting_label = QLabel(setting.name)
                setting_label.setMinimumWidth(200)

                 # Depending on the setting type we add different widgets to the view
                if isinstance(setting, FloatSetting) or isinstance(setting, IntSetting) or isinstance(setting, StringSetting):
                    edit_widget = QLineEdit(str(setting.value))
                    edit_widget.setMinimumWidth(100)
                    # Connect the editingFinished signal to the on_value_changed slot of the setting
                    edit_widget.editingFinished.connect(lambda x=edit_widget, s=setting: s.on_value_changed(x.text()))

                elif isinstance(setting, BooleanSetting):
                    edit_widget = QCheckBox()
                    edit_widget.setChecked(setting.value)
                    edit_widget.stateChanged.connect(lambda x=edit_widget, s=setting: s.on_value_changed(x))

                elif isinstance(setting, SelectionSetting):
                    edit_widget = QComboBox()
                    edit_widget.addItems(setting.options)
                    edit_widget.setCurrentText(setting.value)
                    edit_widget.currentTextChanged.connect(lambda x=edit_widget, s=setting: s.on_value_changed(x))
                

                # Add a icon that can be used as a tooltip
                if setting.description is not None:
                    logger.debug("Adding tooltip to setting: %s", setting.name)
                    self_path = Path(__file__).parent
                    icon = Logos.QuestionMark_16x16()
                    icon_label = QLabel()
                    icon_label.setPixmap(icon.pixmap(icon.availableSizes()[0]))
                    icon_label.setFixedSize(icon.availableSizes()[0])

                    icon_label.setToolTip(setting.description)
                
                 # Add a horizontal layout for the setting
                layout = QHBoxLayout()
                # Add the label and the line edit to the layout
                layout.addItem(spacer)
                layout.addWidget(setting_label)
                layout.addWidget(edit_widget)
                layout.addWidget(icon_label)
                layout.addStretch(1)
                # Add the layout to the vertical layout of the widget
                category_layout.addLayout(layout)
            
            category_layout.addStretch(1)
            self._ui_form.gridLayout.addLayout(category_layout, row, column)
            
        
        # Push all the settings to the top of the widget
        self._ui_form.verticalLayout.addStretch(1)

        